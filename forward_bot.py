# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#    pip install telethon nest_asyncio

import asyncio
import nest_asyncio
import tempfile
import os
import mimetypes
from telethon import TelegramClient, events

# ‚îÄ‚îÄ –ü–ê–†–ê–ú–ï–¢–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
API_ID    = 27819996
API_HASH  = "9aa1ffc6d32be6a87a3267baeee79cb9"
BOT_TOKEN = "7893214668:AAGnPX-zf9g1VvaRi7YgRXbJ_LVPBYz69HQ"
SOURCE    = "lostestos"     # –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–∑ @
TARGET    = "@vqurse_1"     # –∫–∞–Ω–∞–ª-–ø—Ä–∏—ë–º–Ω–∏–∫ —Å @
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –ü–∞—Ç—á–∏–º event loop (–¥–ª—è Jupyter/Colab)
nest_asyncio.apply()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
user_client = TelegramClient(None, API_ID, API_HASH)
bot_client  = TelegramClient(None, API_ID, API_HASH)

async def main():
    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    await bot_client.start(bot_token=BOT_TOKEN)
    # –°—Ç–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_client.start()
    print(f"üîî Forwarding from @{SOURCE} to {TARGET}‚Ä¶")

    # –ü–æ–ª—É—á–∞–µ–º entity —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    target_entity = await bot_client.get_input_entity(TARGET)

    @user_client.on(events.NewMessage(chats=SOURCE))
    async def handler(event):
        msg = event.message
        text = msg.text or ''
        try:
            if msg.media:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                mime_type = None
                if hasattr(msg.media, 'document') and msg.media.document.mime_type:
                    mime_type = msg.media.document.mime_type
                elif hasattr(msg.media, 'photo'):
                    mime_type = 'image/jpeg'
                ext = mimetypes.guess_extension(mime_type) or ''
                # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
                    path = tmp.name
                # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≤ —Ñ–∞–π–ª
                await user_client.download_media(msg.media, file=path)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±–æ—Ç–æ–º
                await bot_client.send_file(target_entity, path, caption=text)
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(path)
            else:
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç
                await bot_client.send_message(target_entity, text)
            print(f"‚úÖ Forwarded message {msg.id}")
        except Exception as e:
            print(f"‚ùå Error forwarding {msg.id}: {e}")

    # –ó–∞–ø—É—Å–∫ —Å–ª—É—â–∞—Ç–µ–ª—è
    await user_client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
